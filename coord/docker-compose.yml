version: '3.3'

services:
  cassandra-coord:
    image: cassandra:${CASSANDRA_TAG}
    ports:
      - ${CASSANDRA_COORD_INC_HOST_PORT}:${CASSANDRA_COORD_INC_CONTAINER_PORT}
      - ${CASSANDRA_COORD_INC_SSL_HOST_PORT}:${CASSANDRA_COORD_INC_SSL_CONTAINER_PORT}
      - ${CASSANDRA_COORD_JMX_HOST_PORT}:${CASSANDRA_COORD_JMX_CONTAINER_PORT}
      - ${CASSANDRA_COORD_CQL_HOST_PORT}:${CASSANDRA_COORD_CQL_CONTAINER_PORT}
      - ${CASSANDRA_COORD_SSL_CONTAINER_PORT}:${CASSANDRA_COORD_SSL_CONTAINER_PORT}
      - ${CASSANDRA_COORD_THRIFT_CONTAINER_PORT}:${CASSANDRA_COORD_THRIFT_CONTAINER_PORT}
    user: ${CASSANDRA_USERNAME}
    environment:
      CASSANDRA_LISTEN_ADDRESS: ${CASSANDRA_COORD_LISTEN_ADDRESS}
      CASSANDRA_RPC_ADDRESS: ${CASSANDRA_COORD_RPC_ADDRESS}
      CASSANDRA_START_RPC: ${CASSANDRA_COORD_START_RPC}
      CASSANDRA_SEEDS: ${CASSANDRA_COORD_SEEDS}
      CASSANDRA_CLUSTER_NAME: ${CASSANDRA_COORD_CLUSTER_NAME}
      CASSANDRA_NUM_TOKENS: ${CASSANDRA_COORD_NUM_TOKENS}
      CASSANDRA_DC: ${CASSANDRA_COORD_DC}
      CASSANDRA_RACK: ${CASSANDRA_COORD_RACK}
      CASSANDRA_ENDPOINT_SNITCH: ${CASSANDRA_COORD_ENDPOINT_SNITCH}
    networks:
      default:
        ipv4_address: ${CASSANDRA_COORD_IPV4_ADDRESS}
    volumes:
      - cassandra-data:/var/lib/cassandra    

  # Ephemeral node, to initialize data structures
  cassandra-init:
    image: cassandra:${CASSANDRA_TAG}
    ports:
      - ${CASSANDRA_INIT_INC_HOST_PORT}:${CASSANDRA_INIT_INC_CONTAINER_PORT}
      - ${CASSANDRA_INIT_INC_SSL_HOST_PORT}:${CASSANDRA_INIT_INC_SSL_CONTAINER_PORT}
      - ${CASSANDRA_INIT_JMX_HOST_PORT}:${CASSANDRA_INIT_JMX_CONTAINER_PORT}
      - ${CASSANDRA_INIT_CQL_HOST_PORT}:${CASSANDRA_INIT_CQL_CONTAINER_PORT}
      - ${CASSANDRA_INIT_SSL_HOST_PORT}:${CASSANDRA_INIT_SSL_CONTAINER_PORT}
      - ${CASSANDRA_INIT_THRIFT_HOST_PORT}:${CASSANDRA_INIT_THRIFT_CONTAINER_PORT}
    user: ${CASSANDRA_USERNAME}
    environment:
      CASSANDRA_LISTEN_ADDRESS: ${CASSANDRA_INIT_LISTEN_ADDRESS}
      CASSANDRA_RPC_ADDRESS: ${CASSANDRA_INIT_RPC_ADDRESS}
      CASSANDRA_START_RPC: ${CASSANDRA_INIT_START_RPC}
      CASSANDRA_SEEDS: ${CASSANDRA_INIT_SEEDS}
      CASSANDRA_CLUSTER_NAME: ${CASSANDRA_INIT_CLUSTER_NAME}
      CASSANDRA_NUM_TOKENS: ${CASSANDRA_INIT_NUM_TOKENS}
      CASSANDRA_DC: ${CASSANDRA_INIT_DC}
      CASSANDRA_RACK: ${CASSANDRA_INIT_RACK}
      CASSANDRA_ENDPOINT_SNITCH: ${CASSANDRA_INIT_ENDPOINT_SNITCH}
    command: >
      /bin/bash -c "
      echo Waiting for the coordination node to start ...
      && while [ `timeout 5 /bin/bash -c \"</dev/tcp/${CASSANDRA_COORD_LISTEN_ADDRESS}/${CASSANDRA_COORD_CQL_CONTAINER_PORT}\"; echo $$?` -ne 0 ]; do echo Coordination node ${CASSANDRA_COORD_LISTEN_ADDRESS} not available yet; sleep 5; done  
      && echo Creating keyspace...
      && /opt/cassandra/bin/cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS cod_test WITH replication={'class':'SimpleStrategy','replication_factor':${CASSANDRA_REPLICATION_FACTOR}} AND durable_writes=TRUE\" ${CASSANDRA_COORD_LISTEN_ADDRESS} ${CASSANDRA_COORD_CQL_CONTAINER_PORT}
      && echo ... done.
      && echo Creating table...
      && /opt/cassandra/bin/cqlsh -e \"CREATE TABLE IF NOT EXISTS cod_test.records (\"id\" bigint,\"rec_data\" VARCHAR,PRIMARY KEY(id)) WITH compression = {'class': 'ZstdCompressor', 'chunk_length_in_kb': 64, 'crc_check_chance': 0.5, 'compression_level': 5}\" ${CASSANDRA_COORD_LISTEN_ADDRESS} ${CASSANDRA_COORD_CQL_CONTAINER_PORT}
      && echo ... done.
      && exit 0"
    networks:
      default:
        ipv4_address: ${CASSANDRA_INIT_IPV4_ADDRESS}

networks:
  default:
    name: ${CASSANDRA_NETWORK_NAME}

volumes:
  cassandra-data: